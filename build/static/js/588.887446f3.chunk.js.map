{"version":3,"file":"static/js/588.887446f3.chunk.js","mappings":"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","sources":["components/settings/modals/TelegramConfigModal.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { Box, Typography, Button, Stack, TextField, Switch, FormControlLabel, Snackbar, Alert, CircularProgress, IconButton, InputAdornment } from '@mui/material';\nimport { Visibility, VisibilityOff } from '@mui/icons-material';\nimport { useTelegram } from '../../../context/TelegramContext';\n\nconst TelegramConfigModal = ({\n  form,\n  onChange,\n  onNotifChange,\n  onSave,\n  onTest,\n  testStatus,\n  testMessage,\n  saving,\n  onClose\n}) => {\n  const [showToken, setShowToken] = useState(false);\n  const { reloadConfig } = useTelegram();\n\n  // Envolvemos onSave para llamar a reloadConfig despuÃ©s de guardar\n  const handleSaveAndReload = async () => {\n    await onSave();\n    if (typeof reloadConfig === 'function') {\n      await reloadConfig();\n      console.log('ðŸ”„ reloadConfig llamado tras guardar Telegram.');\n    }\n  };\n\n  return (\n    <Box sx={{ p: 3 }}>\n      <Typography variant=\"h6\" sx={{ mb: 2 }}>\n        ConfiguraciÃ³n de Bot Telegram\n      </Typography>\n      <Stack spacing={2}>\n        <TextField\n          label=\"Token del Bot\"\n          fullWidth\n          size=\"small\"\n          type={showToken ? 'text' : 'password'}\n          value={form.botToken}\n          onChange={onChange('botToken')}\n          InputProps={{\n            endAdornment: (\n              <InputAdornment position=\"end\">\n                <IconButton\n                  aria-label={showToken ? 'Ocultar token' : 'Mostrar token'}\n                  onClick={() => setShowToken((v) => !v)}\n                  edge=\"end\"\n                  size=\"small\"\n                >\n                  {showToken ? <VisibilityOff /> : <Visibility />}\n                </IconButton>\n              </InputAdornment>\n            )\n          }}\n        />\n        <TextField label=\"Chat ID\" fullWidth size=\"small\" value={form.chatId} onChange={onChange('chatId')} />\n        <Typography variant=\"subtitle2\">Notificaciones</Typography>\n        <FormControlLabel control={<Switch checked={form.notifications.sales} onChange={onNotifChange('sales')} />} label=\"Ventas\" />\n        <FormControlLabel control={<Switch checked={form.notifications.lowStock} onChange={onNotifChange('lowStock')} />} label=\"Stock bajo\" />\n        <FormControlLabel control={<Switch checked={form.notifications.dailySummary} onChange={onNotifChange('dailySummary')} />} label=\"Resumen diario\" />\n        <Stack direction=\"row\" spacing={2} sx={{ mt: 2 }}>\n          <Button variant=\"contained\" onClick={handleSaveAndReload} disabled={saving}>\n            {saving ? <CircularProgress size={20} color=\"inherit\" /> : 'Guardar'}\n          </Button>\n          <Button variant=\"outlined\" onClick={onClose}>Cerrar</Button>\n          <Button variant=\"outlined\" color=\"info\" onClick={onTest} disabled={testStatus === 'loading'}>\n            {testStatus === 'loading' ? <CircularProgress size={20} color=\"inherit\" /> : 'Probar conexiÃ³n'}\n          </Button>\n        </Stack>\n        {testStatus !== 'idle' && (\n          <Alert severity={testStatus === 'success' ? 'success' : 'error'} sx={{ mt: 1 }}>\n            {testMessage}\n          </Alert>\n        )}\n      </Stack>\n    </Box>\n  );\n};\n\nexport default TelegramConfigModal; "],"names":["_ref","form","onChange","onNotifChange","onSave","onTest","testStatus","testMessage","saving","onClose","showToken","setShowToken","useState","reloadConfig","useTelegram","_jsxs","Box","sx","p","children","_jsx","Typography","variant","mb","Stack","spacing","TextField","label","fullWidth","size","type","value","botToken","InputProps","endAdornment","InputAdornment","position","IconButton","onClick","v","edge","VisibilityOff","Visibility","chatId","FormControlLabel","control","Switch","checked","notifications","sales","lowStock","dailySummary","direction","mt","Button","async","console","log","disabled","CircularProgress","color","Alert","severity"],"sourceRoot":""}