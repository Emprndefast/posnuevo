{"version":3,"file":"static/js/244.415a5677.chunk.js","mappings":"gSAIA,MAuHA,EAvHqCA,IAA8C,IAA7C,QAAEC,EAAO,cAAEC,EAAgB,CAAC,EAAC,OAAEC,GAAQH,EAC3E,MAAOI,EAASC,IAAcC,EAAAA,EAAAA,UAASJ,EAAcE,UAAW,IACzDG,EAAKC,IAAUF,EAAAA,EAAAA,UAASJ,EAAcK,KAAO,KAC7CE,EAASC,IAAmBJ,EAAAA,EAAAA,UAASJ,EAAcO,SAAW,IAC9DE,EAAcC,IAAmBN,EAAAA,EAAAA,WAAS,IAC1CO,EAAaC,IAAkBR,EAAAA,EAAAA,UAAS,KACxCS,EAAkBC,IAAuBV,EAAAA,EAAAA,UAAS,YAClDW,EAASC,IAAcZ,EAAAA,EAAAA,WAAS,GAoDvC,OACEa,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACC,GAAI,CAAEC,EAAG,EAAGC,SAAU,KAAMC,SAAA,EAC/BC,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACC,QAAQ,KAAKN,GAAI,CAAEO,GAAI,GAAIJ,SAAC,+CAGxCL,EAAAA,EAAAA,MAACU,EAAAA,EAAK,CAACC,QAAS,EAAEN,SAAA,EAChBC,EAAAA,EAAAA,KAACM,EAAAA,EAAgB,CACfC,SAASP,EAAAA,EAAAA,KAACQ,EAAAA,EAAM,CAACC,QAAS9B,EAAS+B,SAAUC,GAAK/B,EAAW+B,EAAEC,OAAOH,WACtEI,MAAM,qCAERb,EAAAA,EAAAA,KAACc,EAAAA,EAAS,CACRD,MAAM,oBACNE,KAAK,WACLC,MAAOlC,EACP4B,SAAUC,GAAK5B,EAAO4B,EAAEC,OAAOI,MAAMC,QAAQ,UAAW,KACxDC,WAAY,CAAEC,UAAW,GACzBC,UAAWzC,EACX0C,WAAS,EACTC,WAAW,4BAEbtB,EAAAA,EAAAA,KAACc,EAAAA,EAAS,CACRD,MAAM,kCACNE,KAAK,SACLC,MAAOhC,EACP0B,SAAUC,GAAK1B,EAAgBsC,OAAOZ,EAAEC,OAAOI,QAC/CQ,WAAY,CAAEC,cAAczB,EAAAA,EAAAA,KAAC0B,EAAAA,EAAc,CAACC,SAAS,MAAK5B,SAAC,SAC3DqB,UAAWzC,EACX0C,WAAS,EACTC,WAAW,2BAEb5B,EAAAA,EAAAA,MAACU,EAAAA,EAAK,CAACwB,UAAU,MAAMvB,QAAS,EAAGT,GAAI,CAAEiC,GAAI,GAAI9B,SAAA,EAC/CC,EAAAA,EAAAA,KAAC8B,EAAAA,EAAM,CAAC5B,QAAQ,YAAY6B,QAjFjBC,KACjB,GAAIrD,KAAaG,GAAOA,EAAImD,OAAS,GAInC,OAHA5C,EAAe,2CACfE,EAAoB,cACpBJ,GAAgB,GAGlB,GAAIR,IAAYK,EAAU,GAAKA,EAAU,KAIvC,OAHAK,EAAe,4CACfE,EAAoB,cACpBJ,GAAgB,GAIlB,MAAM+C,EAAS,CAAEvD,UAASG,MAAKE,WAG/B,IACEmD,aAAaC,QAAQ,oBAAqBC,KAAKC,UAAUJ,IACrDxD,GAAQA,EAAOwD,GACrB7C,EAAe,2CACfE,EAAoB,WACpBJ,GAAgB,GAChBoD,YAAW,IAAM/D,KAAW,IAC5B,CAAE,MAAOgE,GACPC,QAAQD,MAAM,oCAAkCA,GAChDnD,EAAe,wCACfE,EAAoB,SACpBJ,GAAgB,EAClB,GAoDsDY,SAAC,aACjDC,EAAAA,EAAAA,KAAC8B,EAAAA,EAAM,CAAC5B,QAAQ,WAAW6B,QAASvD,EAAQuB,SAAC,WAC5CpB,GAAWG,EAAImD,QAAU,IACxBjC,EAAAA,EAAAA,KAAC8B,EAAAA,EAAM,CACL5B,QAAQ,WACRwC,MAAM,YACNX,QAvDOY,KACjB,IAAK7D,GAAOA,EAAImD,OAAS,EAIvB,OAHA5C,EAAe,uDACfE,EAAoB,cACpBJ,GAAgB,GAGlBM,GAAW,EAAK,EAiDNG,GAAI,CAAEgD,GAAI,QAAS7C,SACpB,2BAMPC,EAAAA,EAAAA,KAAC6C,EAAAA,EAAQ,CAACC,KAAM5D,EAAc6D,iBAAkB,IAAMvE,QAASA,IAAMW,GAAgB,GAAOY,UAC1FC,EAAAA,EAAAA,KAACgD,EAAAA,EAAK,CAACC,SAAU3D,EAAiBS,SAAEX,MAGrCI,IACCQ,EAAAA,EAAAA,KAACkD,EAAAA,EAAe,CACdC,YAAarE,EACbsE,SA5DaC,KACnB5D,GAAW,EAAM,EA4DX6D,SAzDaC,KACnB9D,GAAW,EAAM,MA2DX,C","sources":["components/settings/modals/ProtectorPantallaConfigModal.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { Box, Typography, TextField, Button, Stack, Switch, FormControlLabel, Snackbar, Alert, InputAdornment } from '@mui/material';\nimport PantallaBloqueo from '../PantallaBloqueo';\n\nconst ProtectorPantallaConfigModal = ({ onClose, initialConfig = {}, onSave }) => {\n  const [enabled, setEnabled] = useState(initialConfig.enabled || false);\n  const [pin, setPin] = useState(initialConfig.pin || '');\n  const [timeout, setTimeoutValue] = useState(initialConfig.timeout || 5);\n  const [showSnackbar, setShowSnackbar] = useState(false);\n  const [snackbarMsg, setSnackbarMsg] = useState('');\n  const [snackbarSeverity, setSnackbarSeverity] = useState('success');\n  const [testing, setTesting] = useState(false);\n\n  const handleSave = () => {\n    if (enabled && (!pin || pin.length < 4)) {\n      setSnackbarMsg('El PIN debe tener al menos 4 dígitos');\n      setSnackbarSeverity('error');\n      setShowSnackbar(true);\n      return;\n    }\n    if (enabled && (timeout < 1 || timeout > 120)) {\n      setSnackbarMsg('El tiempo debe ser entre 1 y 120 minutos');\n      setSnackbarSeverity('error');\n      setShowSnackbar(true);\n      return;\n    }\n\n    const config = { enabled, pin, timeout };\n    \n    // Guardar en localStorage\n    try {\n      localStorage.setItem('protectorPantalla', JSON.stringify(config));\n      if (onSave) onSave(config);\n    setSnackbarMsg('Configuración guardada correctamente');\n    setSnackbarSeverity('success');\n    setShowSnackbar(true);\n    setTimeout(() => onClose(), 800);\n    } catch (error) {\n      console.error('Error guardando configuración:', error);\n      setSnackbarMsg('Error al guardar la configuración');\n      setSnackbarSeverity('error');\n      setShowSnackbar(true);\n    }\n  };\n\n  const handleTest = () => {\n    if (!pin || pin.length < 4) {\n      setSnackbarMsg('El PIN debe tener al menos 4 dígitos para probar');\n      setSnackbarSeverity('error');\n      setShowSnackbar(true);\n      return;\n    }\n    setTesting(true);\n  };\n\n  const handleUnlock = () => {\n    setTesting(false);\n  };\n\n  const handleLogout = () => {\n    setTesting(false);\n  };\n\n  return (\n    <Box sx={{ p: 3, minWidth: 320 }}>\n      <Typography variant=\"h6\" sx={{ mb: 2 }}>\n        Configuración de Protector de Pantalla\n      </Typography>\n      <Stack spacing={2}>\n        <FormControlLabel\n          control={<Switch checked={enabled} onChange={e => setEnabled(e.target.checked)} />}\n          label=\"Activar bloqueo por inactividad\"\n        />\n        <TextField\n          label=\"PIN de desbloqueo\"\n          type=\"password\"\n          value={pin}\n          onChange={e => setPin(e.target.value.replace(/[^0-9]/g, ''))}\n          inputProps={{ maxLength: 8 }}\n          disabled={!enabled}\n          fullWidth\n          helperText=\"Mínimo 4 dígitos\"\n        />\n        <TextField\n          label=\"Tiempo de inactividad (minutos)\"\n          type=\"number\"\n          value={timeout}\n          onChange={e => setTimeoutValue(Number(e.target.value))}\n          InputProps={{ endAdornment: <InputAdornment position=\"end\">min</InputAdornment> }}\n          disabled={!enabled}\n          fullWidth\n          helperText=\"Entre 1 y 120 minutos\"\n        />\n        <Stack direction=\"row\" spacing={2} sx={{ mt: 2 }}>\n          <Button variant=\"contained\" onClick={handleSave}>Guardar</Button>\n          <Button variant=\"outlined\" onClick={onClose}>Cerrar</Button>\n          {enabled && pin.length >= 4 && (\n            <Button \n              variant=\"outlined\" \n              color=\"secondary\" \n              onClick={handleTest}\n              sx={{ ml: 'auto' }}\n            >\n              Probar Pantalla\n            </Button>\n          )}\n        </Stack>\n      </Stack>\n      <Snackbar open={showSnackbar} autoHideDuration={3000} onClose={() => setShowSnackbar(false)}>\n        <Alert severity={snackbarSeverity}>{snackbarMsg}</Alert>\n      </Snackbar>\n\n      {testing && (\n        <PantallaBloqueo\n          pinGuardado={pin}\n          onUnlock={handleUnlock}\n          onLogout={handleLogout}\n        />\n      )}\n    </Box>\n  );\n};\n\nexport default ProtectorPantallaConfigModal; "],"names":["_ref","onClose","initialConfig","onSave","enabled","setEnabled","useState","pin","setPin","timeout","setTimeoutValue","showSnackbar","setShowSnackbar","snackbarMsg","setSnackbarMsg","snackbarSeverity","setSnackbarSeverity","testing","setTesting","_jsxs","Box","sx","p","minWidth","children","_jsx","Typography","variant","mb","Stack","spacing","FormControlLabel","control","Switch","checked","onChange","e","target","label","TextField","type","value","replace","inputProps","maxLength","disabled","fullWidth","helperText","Number","InputProps","endAdornment","InputAdornment","position","direction","mt","Button","onClick","handleSave","length","config","localStorage","setItem","JSON","stringify","setTimeout","error","console","color","handleTest","ml","Snackbar","open","autoHideDuration","Alert","severity","PantallaBloqueo","pinGuardado","onUnlock","handleUnlock","onLogout","handleLogout"],"sourceRoot":""}