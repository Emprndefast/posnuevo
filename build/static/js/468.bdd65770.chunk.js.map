{"version":3,"file":"static/js/468.bdd65770.chunk.js","mappings":"4WAIA,SAAeA,EAAAA,EAAAA,IAA2BC,EAAAA,EAAAA,KAAK,OAAQ,CACrDC,EAAG,oLACD,iB,gFCOJ,MA2IA,EA3I6BC,IAAkB,IAAjB,QAAEC,GAASD,EACvC,MAAOE,EAAMC,IAAWC,EAAAA,EAAAA,UAAS,CAC/BC,YAAY,EACZC,gBAAiB,QACjBC,UAAW,GACXC,WAAY,GACZC,SAAU,EACVC,UAAW,IACXC,SAAS,EACTC,OAAQ,GACRC,MAAO,MAEFC,EAAKC,IAAUX,EAAAA,EAAAA,UAAS,IACxBY,EAAUC,IAAeb,EAAAA,EAAAA,UAAS,CAAEc,MAAM,EAAOC,QAAS,GAAIC,SAAU,aAGzE,KAAEC,IAASC,EAAAA,EAAAA,MACX,UAAEC,EAAS,aAAEC,IAAiBC,EAAAA,EAAAA,MAC9B,SAAEC,EAAQ,YAAEC,IAAgBC,EAAAA,EAAAA,MAC5B,OAAEC,EAAM,UAAEC,IAAcC,EAAAA,EAAAA,MACxB,OAAEC,EAAM,UAAEC,IAAcC,EAAAA,EAAAA,KAExBC,EAAgBC,GAAWC,IAC/BlC,EAAQ,IAAKD,EAAM,CAACkC,GAA0B,aAAlBC,EAAEC,OAAOC,KAAsBF,EAAEC,OAAOE,QAAUH,EAAEC,OAAOG,OAAQ,EA8DjG,OACEC,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACC,GAAI,CAAEC,EAAG,EAAGC,SAAU,KAAMC,SAAA,EAC/BjD,EAAAA,EAAAA,KAACkD,EAAAA,EAAU,CAACC,QAAQ,KAAKL,GAAI,CAAEM,GAAI,GAAIH,SAAC,0CAGxCL,EAAAA,EAAAA,MAACS,EAAAA,EAAI,CAACV,MAAO3B,EAAKsC,SAhEEC,CAAChB,EAAGiB,IAAavC,EAAOuC,GAgECV,GAAI,CAAEM,GAAI,GAAIH,SAAA,EACzDjD,EAAAA,EAAAA,KAACyD,EAAAA,EAAG,CAACC,MAAM,uBACX1D,EAAAA,EAAAA,KAACyD,EAAAA,EAAG,CAACC,MAAM,gCAEJ,IAAR1C,IACC4B,EAAAA,EAAAA,MAACe,EAAAA,EAAK,CAACC,QAAS,EAAEX,SAAA,EAChBjD,EAAAA,EAAAA,KAAC6D,EAAAA,EAAgB,CAACC,SAAS9D,EAAAA,EAAAA,KAAC+D,EAAAA,EAAM,CAACrB,QAAStC,EAAKG,WAAY+C,SAAUjB,EAAa,gBAAmBqB,MAAM,4BAC7Gd,EAAAA,EAAAA,MAACoB,EAAAA,EAAW,CAACC,WAAS,EAACC,KAAK,QAAQC,UAAW/D,EAAKG,WAAW0C,SAAA,EAC7DjD,EAAAA,EAAAA,KAACoE,EAAAA,EAAU,CAAAnB,SAAC,4BACZL,EAAAA,EAAAA,MAACyB,EAAAA,EAAM,CAAC1B,MAAOvC,EAAKI,gBAAiB8C,SAAUjB,EAAa,mBAAoBqB,MAAM,yBAAwBT,SAAA,EAC5GjD,EAAAA,EAAAA,KAACsE,EAAAA,EAAQ,CAAC3B,MAAM,QAAOM,SAAC,YACxBjD,EAAAA,EAAAA,KAACsE,EAAAA,EAAQ,CAAC3B,MAAM,SAAQM,SAAC,aACzBjD,EAAAA,EAAAA,KAACsE,EAAAA,EAAQ,CAAC3B,MAAM,UAASM,SAAC,mBAG9BL,EAAAA,EAAAA,MAACe,EAAAA,EAAK,CAACY,UAAU,MAAMX,QAAS,EAAGd,GAAI,CAAE0B,GAAI,GAAIvB,SAAA,EAC/CjD,EAAAA,EAAAA,KAACyE,EAAAA,EAAM,CAACtB,QAAQ,YAAYuB,QAASvE,EAAQ8C,SAAC,aAC9CjD,EAAAA,EAAAA,KAACyE,EAAAA,EAAM,CAACtB,QAAQ,WAAWuB,QAASvE,EAAQ8C,SAAC,iBAI1C,IAARjC,IACC4B,EAAAA,EAAAA,MAACe,EAAAA,EAAK,CAACC,QAAS,EAAEX,SAAA,EAChBjD,EAAAA,EAAAA,KAACkD,EAAAA,EAAU,CAACC,QAAQ,YAAWF,SAAC,8BAChCjD,EAAAA,EAAAA,KAAC2E,EAAAA,EAAS,CAACjB,MAAM,kBAAkBf,MAAOvC,EAAKK,UAAW6C,SAAUjB,EAAa,aAAc4B,WAAS,EAACC,KAAK,WAC9GlE,EAAAA,EAAAA,KAAC2E,EAAAA,EAAS,CAACjB,MAAM,sBAAmBf,MAAOvC,EAAKM,WAAY4C,SAAUjB,EAAa,cAAe4B,WAAS,EAACC,KAAK,QAAQzB,KAAK,cAC9HzC,EAAAA,EAAAA,KAAC2E,EAAAA,EAAS,CAACjB,MAAM,uCAAoCjB,KAAK,SAASE,MAAOvC,EAAKO,SAAU2C,SAAUjB,EAAa,YAAa4B,WAAS,EAACC,KAAK,WAC5IlE,EAAAA,EAAAA,KAAC2E,EAAAA,EAAS,CAACjB,MAAM,wCAAqCjB,KAAK,SAASE,MAAOvC,EAAKQ,UAAW0C,SAAUjB,EAAa,aAAc4B,WAAS,EAACC,KAAK,WAC/IlE,EAAAA,EAAAA,KAACkD,EAAAA,EAAU,CAACC,QAAQ,YAAYL,GAAI,CAAE0B,GAAI,GAAIvB,SAAC,8BAC/CL,EAAAA,EAAAA,MAACe,EAAAA,EAAK,CAACY,UAAU,MAAMX,QAAS,EAAEX,SAAA,EAChCjD,EAAAA,EAAAA,KAACyE,EAAAA,EAAM,CAACtB,QAAQ,YAAYyB,MAAM,UAAUC,WAAW7E,EAAAA,EAAAA,KAAC8E,EAAAA,EAAe,IAAKX,SAAU/D,EAAKS,QAAS6D,QA3FzFK,UACnB,GAAKxD,EAAL,CACAlB,GAAQ2E,IAAC,IAAUA,EAAGnE,SAAS,EAAMC,OAAQ,GAAIC,MAAO,OACxD,IAEE,IAAK,MAAMkE,KAAQxD,QACXyD,EAAAA,EAAAA,KAAOC,EAAAA,EAAAA,IAAIC,EAAAA,GAAI,YAAaH,EAAKI,IAAK,IAAKJ,EAAMK,IAAK/D,EAAK+D,MAGnE,IAAK,MAAMC,KAAO3D,QACVsD,EAAAA,EAAAA,KAAOC,EAAAA,EAAAA,IAAIC,EAAAA,GAAI,WAAYG,EAAIF,IAAK,IAAKE,EAAKD,IAAK/D,EAAK+D,MAGhE,IAAK,MAAME,KAASzD,QACZmD,EAAAA,EAAAA,KAAOC,EAAAA,EAAAA,IAAIC,EAAAA,GAAI,SAAUI,EAAMH,IAAK,IAAKG,EAAOF,IAAK/D,EAAK+D,YAG5DJ,EAAAA,EAAAA,KAAOC,EAAAA,EAAAA,IAAIC,EAAAA,GAAI,gBAAiB7D,EAAK+D,KAAM,IAAKpD,EAAQoD,IAAK/D,EAAK+D,MACxEjF,GAAQ2E,IAAC,IAAUA,EAAGnE,SAAS,EAAOC,OAAQ,uCAC9CK,EAAY,CAAEC,MAAM,EAAMC,QAAS,uCAAwCC,SAAU,WACvF,CAAE,MAAOmE,GACPpF,GAAQ2E,IAAC,IAAUA,EAAGnE,SAAS,EAAOE,MAAO,2BAC7CI,EAAY,CAAEC,MAAM,EAAMC,QAAS,uBAAwBC,SAAU,SACvE,CAtBiB,CAsBjB,EAoEkI2B,SAAC,gBAG3HjD,EAAAA,EAAAA,KAACyE,EAAAA,EAAM,CAACtB,QAAQ,WAAWyB,MAAM,UAAUC,WAAW7E,EAAAA,EAAAA,KAAC0F,EAAiB,IAAKvB,SAAU/D,EAAKS,QAAS6D,QAnExFK,UACrB,GAAKxD,EAAL,CACAlB,GAAQ2E,IAAC,IAAUA,EAAGnE,SAAS,EAAMC,OAAQ,GAAIC,MAAO,OACxD,IAEE,MAAM4E,GAAQC,EAAAA,EAAAA,IAAMC,EAAAA,EAAAA,IAAWT,EAAAA,GAAI,cAAcU,EAAAA,EAAAA,IAAM,MAAO,KAAMvE,EAAK+D,MACnES,QAAiBC,EAAAA,EAAAA,IAAQL,GAC/BjE,EAAaqE,EAASE,KAAKC,KAAIf,IAAG,CAAOE,GAAIF,EAAIE,MAAOF,EAAIgB,YAE5D,MAAMC,GAAOR,EAAAA,EAAAA,IAAMC,EAAAA,EAAAA,IAAWT,EAAAA,GAAI,aAAaU,EAAAA,EAAAA,IAAM,MAAO,KAAMvE,EAAK+D,MACjEe,QAAgBL,EAAAA,EAAAA,IAAQI,GAC9BvE,EAAYwE,EAAQJ,KAAKC,KAAIf,IAAG,CAAOE,GAAIF,EAAIE,MAAOF,EAAIgB,YAE1D,MAAMG,GAAOV,EAAAA,EAAAA,IAAMC,EAAAA,EAAAA,IAAWT,EAAAA,GAAI,WAAWU,EAAAA,EAAAA,IAAM,MAAO,KAAMvE,EAAK+D,MAC/DiB,QAAgBP,EAAAA,EAAAA,IAAQM,GAC9BtE,EAAUuE,EAAQN,KAAKC,KAAIf,IAAG,CAAOE,GAAIF,EAAIE,MAAOF,EAAIgB,YAExD,MAAMK,QAAmBR,EAAAA,EAAAA,KAAQJ,EAAAA,EAAAA,IAAMC,EAAAA,EAAAA,IAAWT,EAAAA,GAAI,kBAAkBU,EAAAA,EAAAA,IAAM,MAAO,KAAMvE,EAAK+D,OAC3FkB,EAAWC,OACdtE,EAAU,IAAKqE,EAAWP,KAAK,GAAGE,SAEpC9F,GAAQ2E,IAAC,IAAUA,EAAGnE,SAAS,EAAOC,OAAQ,yCAC9CK,EAAY,CAAEC,MAAM,EAAMC,QAAS,4CAA6CC,SAAU,WAC5F,CAAE,MAAOmE,GACPpF,GAAQ2E,IAAC,IAAUA,EAAGnE,SAAS,EAAOE,MAAO,+BAC7CI,EAAY,CAAEC,MAAM,EAAMC,QAAS,2BAA4BC,SAAU,SAC3E,CAzBiB,CAyBjB,EAyCqI2B,SAAC,eAG7H7C,EAAKS,UAAWb,EAAAA,EAAAA,KAAC0G,EAAAA,EAAgB,CAACxC,KAAM,GAAIpB,GAAI,CAAE6D,GAAI,QAExDvG,EAAKU,SAAUd,EAAAA,EAAAA,KAAC4G,EAAAA,EAAK,CAACtF,SAAS,UAAS2B,SAAE7C,EAAKU,SAC/CV,EAAKW,QAASf,EAAAA,EAAAA,KAAC4G,EAAAA,EAAK,CAACtF,SAAS,QAAO2B,SAAE7C,EAAKW,YAGjDf,EAAAA,EAAAA,KAAC6G,EAAAA,EAAQ,CAACzF,KAAMF,EAASE,KAAM0F,iBAAkB,IAAM3G,QAASA,IAAMgB,EAAY,IAAKD,EAAUE,MAAM,IAAS6B,UAC9GjD,EAAAA,EAAAA,KAAC4G,EAAAA,EAAK,CAACtF,SAAUJ,EAASI,SAAS2B,SAAE/B,EAASG,cAE5C,C","sources":["../node_modules/@mui/icons-material/esm/CloudDownload.js","components/settings/modals/RespaldosConfigModal.jsx"],"sourcesContent":["\"use client\";\n\nimport createSvgIcon from \"./utils/createSvgIcon.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M19.35 10.04C18.67 6.59 15.64 4 12 4 9.11 4 6.6 5.64 5.35 8.04 2.34 8.36 0 10.91 0 14c0 3.31 2.69 6 6 6h13c2.76 0 5-2.24 5-5 0-2.64-2.05-4.78-4.65-4.96M17 13l-5 5-5-5h3V9h4v4z\"\n}), 'CloudDownload');","import React, { useState } from 'react';\r\nimport { Box, Typography, Button, Stack, Switch, FormControlLabel, FormControl, InputLabel, Select, MenuItem, Snackbar, Alert, Tabs, Tab, TextField, CircularProgress } from '@mui/material';\r\nimport CloudUploadIcon from '@mui/icons-material/CloudUpload';\r\nimport CloudDownloadIcon from '@mui/icons-material/CloudDownload';\r\nimport { collection, setDoc, doc, getDocs, query, where } from 'firebase/firestore';\r\nimport { db } from '../../../firebase/config';\r\nimport { useAuth } from '../../../context/AuthContext';\r\n// Hooks de contexto global (ajusta los imports si tus nombres son diferentes)\r\nimport { useProductos } from '../../../context/ProductosContext';\r\nimport { useClientes } from '../../../context/ClientesContext';\r\nimport { useVentas } from '../../../context/VentasContext';\r\nimport { useConfig } from '../../../context/ConfigContext';\r\n\r\nconst RespaldosConfigModal = ({ onClose }) => {\r\n  const [form, setForm] = useState({\r\n    autoBackup: false,\r\n    backupFrequency: 'daily',\r\n    cloudUser: '',\r\n    cloudToken: '',\r\n    interval: 5,\r\n    batchSize: 1000,\r\n    loading: false,\r\n    status: '',\r\n    error: ''\r\n  });\r\n  const [tab, setTab] = useState(0);\r\n  const [snackbar, setSnackbar] = useState({ open: false, message: '', severity: 'success' });\r\n\r\n  // Contextos globales\r\n  const { user } = useAuth();\r\n  const { productos, setProductos } = useProductos();\r\n  const { clientes, setClientes } = useClientes();\r\n  const { ventas, setVentas } = useVentas();\r\n  const { config, setConfig } = useConfig();\r\n\r\n  const handleChange = (field) => (e) => {\r\n    setForm({ ...form, [field]: e.target.type === 'checkbox' ? e.target.checked : e.target.value });\r\n  };\r\n\r\n  const handleTabChange = (e, newValue) => setTab(newValue);\r\n\r\n  // Subir todos los datos del usuario a Firebase\r\n  const handleSyncUp = async () => {\r\n    if (!user) return;\r\n    setForm(f => ({ ...f, loading: true, status: '', error: '' }));\r\n    try {\r\n      // Subir productos\r\n      for (const prod of productos) {\r\n        await setDoc(doc(db, 'productos', prod.id), { ...prod, uid: user.uid });\r\n      }\r\n      // Subir clientes\r\n      for (const cli of clientes) {\r\n        await setDoc(doc(db, 'clientes', cli.id), { ...cli, uid: user.uid });\r\n      }\r\n      // Subir ventas\r\n      for (const venta of ventas) {\r\n        await setDoc(doc(db, 'ventas', venta.id), { ...venta, uid: user.uid });\r\n      }\r\n      // Subir configuración (solo un documento por usuario)\r\n      await setDoc(doc(db, 'configuracion', user.uid), { ...config, uid: user.uid });\r\n      setForm(f => ({ ...f, loading: false, status: 'Sincronización subida exitosa' }));\r\n      setSnackbar({ open: true, message: 'Datos subidos exitosamente a la nube', severity: 'success' });\r\n    } catch (err) {\r\n      setForm(f => ({ ...f, loading: false, error: 'Error al subir datos' }));\r\n      setSnackbar({ open: true, message: 'Error al subir datos', severity: 'error' });\r\n    }\r\n  };\r\n\r\n  // Descargar todos los datos del usuario desde Firebase\r\n  const handleSyncDown = async () => {\r\n    if (!user) return;\r\n    setForm(f => ({ ...f, loading: true, status: '', error: '' }));\r\n    try {\r\n      // Descargar productos\r\n      const qProd = query(collection(db, 'productos'), where('uid', '==', user.uid));\r\n      const prodSnap = await getDocs(qProd);\r\n      setProductos(prodSnap.docs.map(doc => ({ id: doc.id, ...doc.data() })));\r\n      // Descargar clientes\r\n      const qCli = query(collection(db, 'clientes'), where('uid', '==', user.uid));\r\n      const cliSnap = await getDocs(qCli);\r\n      setClientes(cliSnap.docs.map(doc => ({ id: doc.id, ...doc.data() })));\r\n      // Descargar ventas\r\n      const qVen = query(collection(db, 'ventas'), where('uid', '==', user.uid));\r\n      const venSnap = await getDocs(qVen);\r\n      setVentas(venSnap.docs.map(doc => ({ id: doc.id, ...doc.data() })));\r\n      // Descargar configuración\r\n      const configSnap = await getDocs(query(collection(db, 'configuracion'), where('uid', '==', user.uid)));\r\n      if (!configSnap.empty) {\r\n        setConfig({ ...configSnap.docs[0].data() });\r\n      }\r\n      setForm(f => ({ ...f, loading: false, status: 'Sincronización descarga exitosa' }));\r\n      setSnackbar({ open: true, message: 'Datos descargados exitosamente de la nube', severity: 'success' });\r\n    } catch (err) {\r\n      setForm(f => ({ ...f, loading: false, error: 'Error al descargar datos' }));\r\n      setSnackbar({ open: true, message: 'Error al descargar datos', severity: 'error' });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Box sx={{ p: 3, minWidth: 400 }}>\r\n      <Typography variant=\"h6\" sx={{ mb: 2 }}>\r\n        Configuración de Respaldos y Nube\r\n      </Typography>\r\n      <Tabs value={tab} onChange={handleTabChange} sx={{ mb: 2 }}>\r\n        <Tab label=\"Respaldos locales\" />\r\n        <Tab label=\"Nube / Sincronización\" />\r\n      </Tabs>\r\n      {tab === 0 && (\r\n        <Stack spacing={2}>\r\n          <FormControlLabel control={<Switch checked={form.autoBackup} onChange={handleChange('autoBackup')} />} label=\"Respaldo automático\" />\r\n          <FormControl fullWidth size=\"small\" disabled={!form.autoBackup}>\r\n            <InputLabel>Frecuencia de respaldo</InputLabel>\r\n            <Select value={form.backupFrequency} onChange={handleChange('backupFrequency')} label=\"Frecuencia de respaldo\">\r\n              <MenuItem value=\"daily\">Diario</MenuItem>\r\n              <MenuItem value=\"weekly\">Semanal</MenuItem>\r\n              <MenuItem value=\"monthly\">Mensual</MenuItem>\r\n            </Select>\r\n          </FormControl>\r\n          <Stack direction=\"row\" spacing={2} sx={{ mt: 2 }}>\r\n            <Button variant=\"contained\" onClick={onClose}>Guardar</Button>\r\n            <Button variant=\"outlined\" onClick={onClose}>Cerrar</Button>\r\n          </Stack>\r\n        </Stack>\r\n      )}\r\n      {tab === 1 && (\r\n        <Stack spacing={2}>\r\n          <Typography variant=\"subtitle1\">Configuración de Nube</Typography>\r\n          <TextField label=\"Usuario de nube\" value={form.cloudUser} onChange={handleChange('cloudUser')} fullWidth size=\"small\" />\r\n          <TextField label=\"Token/Contraseña\" value={form.cloudToken} onChange={handleChange('cloudToken')} fullWidth size=\"small\" type=\"password\" />\r\n          <TextField label=\"Intervalo de sincronización (min)\" type=\"number\" value={form.interval} onChange={handleChange('interval')} fullWidth size=\"small\" />\r\n          <TextField label=\"Cantidad de registros por petición\" type=\"number\" value={form.batchSize} onChange={handleChange('batchSize')} fullWidth size=\"small\" />\r\n          <Typography variant=\"subtitle2\" sx={{ mt: 2 }}>Sincronización manual</Typography>\r\n          <Stack direction=\"row\" spacing={2}>\r\n            <Button variant=\"contained\" color=\"primary\" startIcon={<CloudUploadIcon />} disabled={form.loading} onClick={handleSyncUp}>\r\n              Subir todo\r\n            </Button>\r\n            <Button variant=\"outlined\" color=\"primary\" startIcon={<CloudDownloadIcon />} disabled={form.loading} onClick={handleSyncDown}>\r\n              Bajar todo\r\n            </Button>\r\n            {form.loading && <CircularProgress size={28} sx={{ ml: 2 }} />}\r\n          </Stack>\r\n          {form.status && <Alert severity=\"success\">{form.status}</Alert>}\r\n          {form.error && <Alert severity=\"error\">{form.error}</Alert>}\r\n        </Stack>\r\n      )}\r\n      <Snackbar open={snackbar.open} autoHideDuration={3000} onClose={() => setSnackbar({ ...snackbar, open: false })}>\r\n        <Alert severity={snackbar.severity}>{snackbar.message}</Alert>\r\n      </Snackbar>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default RespaldosConfigModal; "],"names":["createSvgIcon","_jsx","d","_ref","onClose","form","setForm","useState","autoBackup","backupFrequency","cloudUser","cloudToken","interval","batchSize","loading","status","error","tab","setTab","snackbar","setSnackbar","open","message","severity","user","useAuth","productos","setProductos","useProductos","clientes","setClientes","useClientes","ventas","setVentas","useVentas","config","setConfig","useConfig","handleChange","field","e","target","type","checked","value","_jsxs","Box","sx","p","minWidth","children","Typography","variant","mb","Tabs","onChange","handleTabChange","newValue","Tab","label","Stack","spacing","FormControlLabel","control","Switch","FormControl","fullWidth","size","disabled","InputLabel","Select","MenuItem","direction","mt","Button","onClick","TextField","color","startIcon","CloudUploadIcon","async","f","prod","setDoc","doc","db","id","uid","cli","venta","err","CloudDownloadIcon","qProd","query","collection","where","prodSnap","getDocs","docs","map","data","qCli","cliSnap","qVen","venSnap","configSnap","empty","CircularProgress","ml","Alert","Snackbar","autoHideDuration"],"sourceRoot":""}