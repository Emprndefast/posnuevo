rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Funciones de utilidad
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function hasRole(roles) {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in roles;
    }
    
    function isValidData(data) {
      return data.keys().hasAll(['userId', 'createdAt', 'updatedAt']);
    }

    // Reglas para usuarios
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isOwner(userId) || hasRole(['admin']);
    }

    // Reglas para productos
    match /products/{productId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.keys().hasAll(['name', 'price', 'stock']);
      allow update: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.keys().hasAll(['name', 'price', 'stock']);
      allow delete: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
    }

    // Reglas para ventas
    match /sales/{saleId} {
      allow read: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || hasRole(['admin', 'manager']));
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.keys().hasAll(['items', 'total', 'paymentMethod']);
      allow update: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || hasRole(['admin', 'manager']));
      allow delete: if hasRole(['admin']);
    }

    // Reglas para clientes
    match /customers/{customerId} {
      allow read: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || hasRole(['admin', 'manager']));
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.keys().hasAll(['name', 'email']);
      allow update: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || hasRole(['admin', 'manager']));
      allow delete: if hasRole(['admin']);
    }

    // Reglas para inventario
    match /inventory/{inventoryId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || hasRole(['admin', 'manager']));
    }

    // Reglas para categor√≠as
    match /categories/{categoryId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || hasRole(['admin', 'manager']));
    }

    // Reglas para servicios
    match /services/{serviceId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || hasRole(['admin', 'manager']));
    }

    // Reglas para reparaciones
    match /repairs/{repairId} {
      allow read: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || hasRole(['admin', 'manager']));
      allow write: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || hasRole(['admin', 'manager']));
    }

    // Reglas para contabilidad
    match /accounting/{transactionId} {
      allow read: if hasRole(['admin', 'manager', 'accountant']);
      allow write: if hasRole(['admin', 'manager', 'accountant']);
    }
  }
} 